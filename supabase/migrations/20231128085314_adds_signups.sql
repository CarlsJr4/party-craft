create table "public"."signups" (
    "id" bigint generated by default as identity not null,
    "event_id" uuid,
    "user_id" uuid
);


alter table "public"."signups" enable row level security;

CREATE UNIQUE INDEX signups_pkey ON public.signups USING btree (id);

alter table "public"."signups" add constraint "signups_pkey" PRIMARY KEY using index "signups_pkey";

alter table "public"."signups" add constraint "signups_event_id_fkey" FOREIGN KEY (event_id) REFERENCES events(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."signups" validate constraint "signups_event_id_fkey";

alter table "public"."signups" add constraint "signups_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."signups" validate constraint "signups_user_id_fkey";


create policy "Enable delete for users based on user_id"
on "public"."signups"
as permissive
for delete
to authenticated
using ((auth.uid() = user_id));


create policy "Enable insert for users based on user_id"
on "public"."signups"
as permissive
for insert
to authenticated
with check ((auth.uid() = user_id));


create policy "Enable read access for authenticated users"
on "public"."signups"
as permissive
for select
to authenticated
using (true);



